name: Build for Multiple Architectures

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: Build for native, fully-supported x86_64.
  build-x86_64:
    runs-on: ubuntu-latest
    name: Build for x86_64
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python for x64
      uses: actions/setup-python@v6
      with:
        python-version: '3.13'
        architecture: 'x64'

    - name: Install build dependencies
      run: sudo apt-get update && sudo apt-get install -y clang mold

    - name: Install Python dependencies
      run: python -m pip install --upgrade pip pillow nuitka

    - name: Compile module with Nuitka
      run: LDFLAGS="-fuse-ld=mold" python -m nuitka --module --clang --lto=yes main.py
    
    - name: Rename artifact for upload
      run: mv main.*.so main-x86_64.so

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: compiled-module-x86_64
        path: main-x86_64.so

  # Job 2: Build for other architectures using a containerized environment.
  build-cross-compile:
    strategy:
      matrix:
        include:
          - arch: aarch64
            image: arm64v8/ubuntu:22.04
          - arch: armv7
            image: arm32v7/ubuntu:22.04
          - arch: i686
            image: i386/ubuntu:22.04
    runs-on: ubuntu-latest
    name: Build for ${{ matrix.arch }} (Containerized)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compile module in Docker container
        run: |
          docker run --rm -v "${{ github.workspace }}":/ws -w /ws ${{ matrix.image }} bash -c '
            set -e # Exit immediately if a command exits with a non-zero status.
            export DEBIAN_FRONTEND=noninteractive
            echo "--- Installing base dependencies ---"
            apt-get update
            apt-get install -y build-essential software-properties-common wget

            # --- Conditional Python Installation ---
            # For aarch64, the PPA is fast and works.
            if [ "${{ matrix.arch }}" = "aarch64" ]; then
              echo "--- Installing Python 3.13 from PPA for aarch64 ---"
              add-apt-repository ppa:deadsnakes/ppa -y
              apt-get update
              apt-get install -y python3.13-full clang mold
            
            # For armv7 and i686, we must build Python from source.
            else
              echo "--- Building Python 3.13 from source for ${{ matrix.arch }} ---"
              apt-get install -y libssl-dev zlib1g-dev libffi-dev libbz2-dev libreadline-dev libsqlite3-dev liblzma-dev clang mold
              cd /tmp
              wget https://www.python.org/ftp/python/3.13.0/Python-3.13.0.tar.xz
              tar -xf Python-3.13.0.tar.xz
              cd Python-3.13.0
              ./configure --enable-optimizations
              make -j$(nproc)
              make altinstall
              cd / && rm -rf /tmp/Python-3.13.0*
            fi
            
            echo "--- Installing Python packages ---"
            python3.13 -m pip install --upgrade pip
            python3.13 -m pip install nuitka pillow

            echo "--- Compiling with Nuitka ---"
            LDFLAGS="-fuse-ld=mold" python3.13 -m nuitka \
              --module \
              --clang \
              --lto=yes \
              main.py
            
            echo "--- Build complete ---"
          '
      - name: Rename artifact for upload
        run: mv main.*.so main-${{ matrix.arch }}.so

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: compiled-module-${{ matrix.arch }}
          path: main-${{ matrix.arch }}.so
